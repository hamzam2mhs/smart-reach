// ---------- Generators / Datasource ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum LeadType {
  NEW
  RETURNING
}

enum LeadStatus {
  ACTIVE
  DO_NOT_CONTACT
  LOST
}

enum DraftStatus {
  DRAFT
  APPROVED
  SENT
}

enum EmailStatus {
  QUEUED
  SENT
  DELIVERED
  OPENED
  BOUNCED
  FAILED
}

enum InteractionType {
  EMAIL
  NOTE
  CALL
  MEETING
  SYSTEM
}

enum ReminderState {
  PENDING
  DONE
  SNOOZED
}

// ---------- Models ----------
model Lead {
  id                String        @id @default(cuid())
  name              String
  email             String?       @unique
  type              LeadType
  status            LeadStatus    @default(ACTIVE)
  phone             String?
  company           String?
  tags              String[]      // simple label system
  query             String?       // for NEW leads: interest / query
  lastService       String?       // for RETURNING leads
  lastServiceDate   DateTime?
  nextSuggestedAt   DateTime?
  notes             String?

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  drafts            EmailDraft[]
  emails            EmailLog[]
  interactions      Interaction[]
  reminders         Reminder[]

  @@index([status, nextSuggestedAt])
  @@index([email])
}

model EmailDraft {
  id          String      @id @default(cuid())
  leadId      String
  lead        Lead        @relation(fields: [leadId], references: [id], onDelete: Cascade)

  subject     String
  body        String
  model       String?     // e.g., "gpt-4o-mini"
  prompt      String?
  tokensUsed  Int?        // optional usage tracking
  status      DraftStatus @default(DRAFT)

  createdBy   String?     // later: user id / email
  createdAt   DateTime    @default(now())
}

model EmailLog {
  id          String      @id @default(cuid())
  leadId      String
  lead        Lead        @relation(fields: [leadId], references: [id], onDelete: Cascade)

  subject     String
  body        String
  provider    String?     // e.g., "gmail", "resend"
  providerId  String?     // message id
  status      EmailStatus @default(QUEUED)
  meta        Json?       // delivery webhooks, headers, etc.

  sentAt      DateTime?   // when actually sent
  createdAt   DateTime    @default(now())

  @@index([status, sentAt])
}

model Interaction {
  id          String          @id @default(cuid())
  leadId      String
  lead        Lead            @relation(fields: [leadId], references: [id], onDelete: Cascade)

  type        InteractionType
  content     String?
  meta        Json?
  occurredAt  DateTime        @default(now())

  @@index([type, occurredAt])
}

model Reminder {
  id          String        @id @default(cuid())
  leadId      String
  lead        Lead          @relation(fields: [leadId], references: [id], onDelete: Cascade)

  dueAt       DateTime
  reason      String?
  state       ReminderState @default(PENDING)
  createdAt   DateTime      @default(now())

  @@index([state, dueAt])
}
