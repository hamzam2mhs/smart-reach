// ---------- Generators / Datasource ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum LeadType {
  NEW
  RETURNING
}

enum LeadStatus {
  ACTIVE
  DO_NOT_CONTACT
  LOST
}

enum DraftStatus {
  DRAFT
  APPROVED
  SENT
}

enum EmailStatus {
  QUEUED
  SENT
  DELIVERED
  OPENED
  BOUNCED
  FAILED
}

enum InteractionType {
  EMAIL
  NOTE
  CALL
  MEETING
  SYSTEM
}

enum ReminderState {
  PENDING
  DONE
  SNOOZED
}

enum UserRole {
  ADMIN
  MEMBER
}

// ---------- Models ----------
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole @default(MEMBER)

  leads     Lead[]
  drafts    EmailDraft[]  @relation("DraftAuthor")
  emails    EmailLog[]    @relation("EmailSender")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lead {
  id              String      @id @default(cuid())

  // Ownership (multi-user)
  ownerId         String
  owner           User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  name            String
  email           String?
  type            LeadType
  status          LeadStatus  @default(ACTIVE)
  phone           String?
  company         String?
  tags            String[]    // simple label system
  query           String?     // for NEW leads: interest / query
  lastService     String?     // for RETURNING leads
  lastServiceDate DateTime?
  nextSuggestedAt DateTime?
  notes           String?

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  drafts          EmailDraft[]
  emails          EmailLog[]
  interactions    Interaction[]
  reminders       Reminder[]

  @@unique([ownerId, email])
  @@index([status, nextSuggestedAt])
  @@index([email])
}

model EmailDraft {
  id          String      @id @default(cuid())
  leadId      String
  lead        Lead        @relation(fields: [leadId], references: [id], onDelete: Cascade)

  subject     String
  body        String
  model       String?
  prompt      String?
  tokensUsed  Int?
  status      DraftStatus @default(DRAFT)

  // Optional author link
  createdById String?
  createdBy   User?       @relation("DraftAuthor", fields: [createdById], references: [id], onDelete: SetNull)

  createdAt   DateTime    @default(now())
}

model EmailLog {
  id          String      @id @default(cuid())
  leadId      String
  lead        Lead        @relation(fields: [leadId], references: [id], onDelete: Cascade)

  subject     String
  body        String
  provider    String?
  providerId  String?
  status      EmailStatus @default(QUEUED)
  meta        Json?

  // Optional sender link (per-user sending later)
  senderId    String?
  sender      User?       @relation("EmailSender", fields: [senderId], references: [id], onDelete: SetNull)

  sentAt      DateTime?
  createdAt   DateTime    @default(now())

  @@index([status, sentAt])
}

model Interaction {
  id          String          @id @default(cuid())
  leadId      String
  lead        Lead            @relation(fields: [leadId], references: [id], onDelete: Cascade)

  type        InteractionType
  content     String?
  meta        Json?
  occurredAt  DateTime        @default(now())

  @@index([type, occurredAt])
}

model Reminder {
  id          String        @id @default(cuid())
  leadId      String
  lead        Lead          @relation(fields: [leadId], references: [id], onDelete: Cascade)

  dueAt       DateTime
  reason      String?
  state       ReminderState @default(PENDING)
  createdAt   DateTime      @default(now())

  @@index([state, dueAt])
}
